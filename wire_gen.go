// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package common

import (
	"github.com/gofunct/common/ask"
	"github.com/gofunct/common/config"
	"github.com/gofunct/common/exec"
	"github.com/gofunct/common/fs"
	"github.com/gofunct/common/fs/generator"
	"github.com/gofunct/common/log"
	"github.com/gofunct/iio"
	"github.com/google/wire"
	"github.com/izumin5210/grapi/pkg/protoc"
	"github.com/jessevdk/go-assets"
	"path/filepath"
)

// Injectors from inject.go:

func NewAsk() (*ask.Service, error) {
	service := iio.NewStdIO()
	askService := ask.New(service)
	return askService, nil
}

func NewConfig() (*config.Service, error) {
	service, err := config.New()
	if err != nil {
		return nil, err
	}
	return service, nil
}

func NewFs(walkFunc filepath.WalkFunc, f *assets.FileSystem) (*fs.Service, error) {
	service := generator.New(f)
	fsService := fs.NewWithGenerator(walkFunc, service)
	return fsService, nil
}

func NewIO() (*iio.Service, error) {
	service := iio.NewStdIO()
	return service, nil
}

func NewLog() (*log.Service, error) {
	service, err := log.NewVerbose()
	if err != nil {
		return nil, err
	}
	return service, nil
}

func NewExec(name string, args ...string) (exec.Interface, error) {
	service := iio.NewStdIO()
	execInterface := exec.New(name, service, args...)
	return execInterface, nil
}

func NewVerboseLog() (*log.Service, error) {
	service, err := log.NewVerbose()
	if err != nil {
		return nil, err
	}
	return service, nil
}

// inject.go:

var DefaultSet = wire.NewSet(ask.DefaultSet, config.DefaultSet, fs.DefaultSet, iio.Set, exec.DefaultSet, log.VerboseSet, protoc.WrapperSet)

var OtherSet = wire.NewSet()
