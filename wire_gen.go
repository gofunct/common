// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package common

import (
	"context"
	"contrib.go.opencensus.io/exporter/stackdriver/monitoredresource"
	"go.opencensus.io/trace"
	"gocloud.dev/blob"
	"gocloud.dev/blob/gcsblob"
	"gocloud.dev/gcp"
	"gocloud.dev/gcp/cloudsql"
	"gocloud.dev/mysql/cloudmysql"
	"gocloud.dev/server"
	"gocloud.dev/server/sdserver"
)

// Injectors from providers.go:

func InjectApp(ctx context.Context) (*Application, func(), error) {
	stackdriverLogger := sdserver.NewRequestLogger()
	roundTripper := gcp.DefaultTransport()
	credentials, err := gcp.DefaultCredentials(ctx)
	if err != nil {
		return nil, nil, err
	}
	tokenSource := gcp.CredentialsTokenSource(credentials)
	httpClient, err := gcp.NewHTTPClient(roundTripper, tokenSource)
	if err != nil {
		return nil, nil, err
	}
	remoteCertSource := cloudsql.NewCertSource(httpClient)
	projectID, err := gcp.DefaultProjectID(credentials)
	if err != nil {
		return nil, nil, err
	}
	config, err := NewConfig()
	if err != nil {
		return nil, nil, err
	}
	params := gcpSQLParams(projectID, config)
	db, err := cloudmysql.Open(ctx, remoteCertSource, params)
	if err != nil {
		return nil, nil, err
	}
	v, cleanup := AppHealthChecks(db)
	monitoredresourceInterface := monitoredresource.Autodetect()
	exporter, cleanup2, err := sdserver.NewExporter(projectID, tokenSource, monitoredresourceInterface)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	sampler := trace.AlwaysSample()
	defaultDriver := _wireDefaultDriverValue
	options := &server.Options{
		RequestLogger:         stackdriverLogger,
		HealthChecks:          v,
		TraceExporter:         exporter,
		DefaultSamplingPolicy: sampler,
		Driver:                defaultDriver,
	}
	serverServer := server.New(options)
	bucket, err := gcpBucket(ctx, config, httpClient)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	application := NewApplication(serverServer, db, bucket, config)
	return application, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireDefaultDriverValue = &server.DefaultDriver{}
)

// providers.go:

func gcpBucket(ctx context.Context, cfg *Config, client *gcp.HTTPClient) (*blob.Bucket, error) {
	return gcsblob.OpenBucket(ctx, cfg.Bucket, client, nil)
}

func gcpSQLParams(id gcp.ProjectID, cfg *Config) *cloudmysql.Params {
	return &cloudmysql.Params{
		ProjectID: string(id),
		Region:    cfg.CloudSqlRegion,
		Instance:  cfg.DbHost,
		Database:  cfg.DbName,
		User:      cfg.DbUser,
		Password:  cfg.DbPassword,
	}
}
