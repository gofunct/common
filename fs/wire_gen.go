// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package fs

import (
	"github.com/google/wire"
	"github.com/spf13/afero"
	"os"
)

// Injectors from providers.go:

func Inject() (*Service, error) {
	service := New()
	return service, nil
}

// providers.go:

func New() *Service {
	var rt = RootDir(os.Getenv("PWD"))
	osFs := afero.NewOsFs()
	baseFs := afero.NewBasePathFs(osFs, rt.String())
	s := &Service{
		Os: &afero.Afero{
			Fs: baseFs,
		},
		Root: rt,
	}
	s.HttpFs = afero.NewHttpFs(s.Os)

	return s
}

func NewFromHOME() *Service {
	var rt = RootDir(os.Getenv("HOME"))
	osFs := afero.NewOsFs()
	baseFs := afero.NewBasePathFs(osFs, rt.String())
	s := &Service{
		Os: &afero.Afero{
			Fs: baseFs,
		},
		Root: rt,
	}
	s.HttpFs = afero.NewHttpFs(s.Os)

	return s
}

func NewFromGOPATH() *Service {
	var rt = RootDir(os.Getenv("GOPATH"))
	osFs := afero.NewOsFs()
	baseFs := afero.NewBasePathFs(osFs, rt.String())
	s := &Service{
		Os: &afero.Afero{
			Fs: baseFs,
		},
		Root: rt,
	}
	s.HttpFs = afero.NewHttpFs(s.Os)

	return s
}

var Provider = wire.NewSet(
	New,
)
